# empieza codigo
import streamlit as st
from openpyxl import Workbook
from io import BytesIO
from datetime import datetime
import numpy as np
import pandas as pd
from openpyxl.drawing.image import Image
from openpyxl.styles import Font, Alignment, PatternFill, Border, Side
import textwrap
import math

def mostrar_app():
    st.set_page_config(page_title="Generador CTG - Transformador de Tensi√≥n", layout="wide")

    st.title("üìÑ Generador de Ficha CTG")
    st.subheader("Transformador de Tensi√≥n")

    st.markdown("### ‚öôÔ∏è Par√°metros del transformador")

    # 1 al 5
    fabricante = pais = referencia = "Indicar"
    st.text("1. Fabricante: " + fabricante)
    st.text("2. Pa√≠s: " +  pais)
    st.text("3. Referencia: " + referencia)
    norma_fabricacion = "IEC 61869-5"
    st.text("4. Norma de fabricaci√≥n: " + norma_fabricacion)
    norma_calidad = "ISO 9001"
    st.text("5. Norma de calidad: " + norma_calidad)

    # 6 al 9
    tipo_ejecucion = st.selectbox("6. Tipo de ejecuci√≥n", ["Interior", "Exterior"])
    altura_instalacion = st.number_input("7. Altura de instalaci√≥n (msnm)", min_value=0, step=100)
    material_aislador = st.selectbox("8. Material del aislador", ["Compuesto siliconado", "Porcelana"])
    tipo_transformador = st.selectbox("8a. Tipo", ["Capacitivo", "Inductivo"])
    tension_um = st.selectbox("9. Tensi√≥n m√°s elevada para el material (Um)", ["123 kV", "245 kV", "550 kV"])

    # 10. Ud
    st.markdown("### üîå 10. Tensi√≥n asignada soportada a la frecuencia industrial (Ud)")
    ud_interno = {"123 kV": "360 kV", "245 kV": "460 kV", "550 kV": "700 kV"}[tension_um]
    st.text(f"Tensi√≥n asignada soportada a la frecuencia industrial (Ud)-Aislamiento Interno a condiciones normales de prueba: {ud_interno}")
    st.text(f"Tensi√≥n asignada soportada a la frecuencia industrial (Ud)-Aislamiento Externo a condiciones normales de prueba (*): {ud_interno} a {int(altura_instalacion)} msnm")

    # 11. Up
    st.markdown("### ‚ö° 11. Tensi√≥n asignada soportada al impulso tipo rayo (Up)")
    up_interno = {"123 kV": "750 kV", "245 kV": "1050 kV", "550 kV": "1550 kV"}[tension_um]
    st.text(f"Tensi√≥n asignada soportada al impulso tipo rayo (Up)-Aislamiento Interno a condiciones normales de prueba: {up_interno}")
    st.text(f"Tensi√≥n asignada soportada al impulso tipo rayo (Up)-Aislamiento Externo a condiciones normales de prueba (*): {up_interno} a {int(altura_instalacion)} msnm")

    # 12. Us
    st.markdown("### ‚ö° 12. Tensi√≥n asignada soportada al impulso tipo maniobra (Us)")
    us_interno = st.text_input("Tensi√≥n asignada soportada al impulso tipo maniobra (Us)-Aislamiento Interno a condiciones normales de prueba (dejar vac√≠o por ahora)")
    us_externo = st.text_input("Tensi√≥n asignada soportada al impulso tipo maniobra (Us)-Aislamiento Externo a condiciones normales de prueba (*) (dejar vac√≠o por ahora)")

    # 13. Frecuencia
    st.markdown("### üì∂ 13. Frecuencia asignada (fr)")
    st.text("60 Hz")

    # 14. factor de tensi√≥n asignado
    st.markdown("### ‚öôÔ∏è 14. Factor de tensi√≥n asignado")
    # Opci√≥n a) Permanente
    factor_permanente = "1,2"
    st.text("a) Permanente: " + factor_permanente)
    # Opci√≥n b) Durante 30 s
    factor_30s = "1,5"
    st.text("b) Durante 30 s: " + factor_30s)

    # 15. Capacidad total
    if tension_um == "123 kV":
        capacidad_minima = 2000
    elif tension_um == "245 kV":
        capacidad_minima = 4000
    elif tension_um == "550 kV":
        capacidad_minima = 10000
    else:
        capacidad_minima = 0  # Fallback por si se a√±ade otra opci√≥n
    # Campo de entrada para capacidad total
    st.markdown("### ‚ö° 15. Capacidad total")
    capacidad_total = st.number_input(
        f"Capacidad total (‚â• {capacidad_minima} pF)",
        min_value=capacidad_minima
    )
    
    # 16 al 18
    st.markdown("### üîß 16-18. Condensadores y tensi√≥n intermedia")
    c1 = c2 = tension_intermedia = "Indicar"
    st.text("16. Condensador de alta tensi√≥n (C1): " + c1)
    st.text("17. Condensador de tensi√≥n intermedia (C2): " + c2)
    st.text("18. Tensi√≥n intermedia asignada en circuito abierto: " + tension_intermedia)

    # 19. N√∫mero de devanados secundarios
    st.markdown("### üîÅ 19. N√∫mero de devanados secundarios")
    num_devanados = st.selectbox("Selecciona el n√∫mero de devanados secundarios", [1, 2, 3])

    # 20. Clase de precisi√≥n
    st.markdown("### üéØ 20. Clase de precisi√≥n")
    st.markdown("**Entre el 25% y el 100% de la carga de precisi√≥n con factor de potencia 0,8 en atraso**")
    clase_precision_a = clase_precision_c = "05-3P"
    st.text("a) Entre el 5% y el 80% de la tensi√≥n asignada: " + clase_precision_a)
    clase_precision_b = "0,2"
    st.text("b) Entre el 80% y el 120% de la tensi√≥n asignada: " + clase_precision_b)
    st.text("c) Entre el 120% y el 150% de la tensi√≥n asignada: " + clase_precision_c)

    # 21. Carga de precisi√≥n
    st.markdown("### ‚öôÔ∏è 21. Carga de precisi√≥n")
    rango_burden = st.selectbox("Rango de burden acorde con IEC 61869-1/3/5", ["I", "II", "III", "IV"])
    st.text("a) Devanado 1: 15 VA")
    st.text("b) Devanado 2: 15 VA")
    st.text("c) Devanado 3: 15 VA")
    st.text("d) Simult√°nea: 45 VA")
    potencia_termica_limite = "Indicar"
    st.text("e) Potencia t√©rmica l√≠mite: " + potencia_termica_limite)


    # 22. Tensi√≥n asignada  
    st.markdown("### ‚ö° 22. Tensi√≥n asignada")
    # a) Tensi√≥n primaria
    upn_opciones = [110, 230, 500]
    upn_seleccionada = st.selectbox("a) Tensi√≥n primaria (Upn)", upn_opciones)
    # Mostrar solo la expresi√≥n simb√≥lica
    st.text(f"{upn_seleccionada} / ‚àö3")
    
    # b) Tensi√≥n secundaria
    usn_opciones = ["115 / ‚àö3", "110 / ‚àö3"]
    usn_seleccionada = st.selectbox("b) Tensi√≥n secundaria (Usn)", usn_opciones)
    
    # Mostrar la expresi√≥n seleccionada
    st.text(usn_seleccionada)

    # 23. Distancia de arco
    st.markdown("### üßØ 23. Distancia de arco")
    distancia_arco = "Indicar"
    st.text("Distancia de arco (mm): " + distancia_arco)

    # Distancia m√≠nima de fuga
    st.markdown("### üìè 26. Distancia m√≠nima de fuga requerida")
    
    # Selecci√≥n de clase SPS
    sps_opciones = {"Bajo": 16, "Medio": 20, "Pesado": 25, "Muy Pesado": 31}
    sps_seleccion = st.selectbox("Selecciona la clase SPS", list(sps_opciones.keys()))
    valor_sps = sps_opciones[sps_seleccion]
    
    # Conversi√≥n de tensi√≥n Um a valor num√©rico
    um_valores = {"123 kV": 123, "245 kV": 245, "550 kV": 550}
    um_num = um_valores.get(tension_um, 0)

    distancia_fuga = um_num * valor_sps
    st.text(f"Distancia m√≠nima de fuga: {distancia_fuga} mm")

    # 24. Dispositivos de Protecci√≥n: (Todos los modelos contar√°n con accesorios carrier)
    disp_prot = st.selectbox(f"Dispositivos de Protecci√≥n: (Todos los modelos contar√°n con accesorios carrier): ", ["S√≠", "No"])

    # Cuchilla externa
    cuchilla_ext = st.selectbox(f"a)Cuchilla externa para cortocircuitar la parte inductiva del equipo del lado del divisor capacitivo (Ground Potencial Switch): ", ["S√≠", "No"])

    # Dispositivo amortiguador
    disp_amort = st.selectbox(f"b) Dispositivo amortiguador de ferrorresonancia: ", ["S√≠", "No"])

    # Interruptores miniatura
    int_mini = st.selectbox(f"c) Interruptores miniatura adecuados para protecci√≥n de los circuitos secundarios de tensi√≥n, con contactos auxiliares para indicaci√≥n de apertura y disparo. La curva de operaci√≥n de los interruptores miniatura debe ser del Tipo Z: ", ["S√≠", "No"])

    # BOT√ìN PARA GENERAR FICHA
   # üìã Diccionario con los datos del transformador
    ficha_ctg = {
        "Fabricante": fabricante,
        "Pa√≠s": pais,
        "Referencia": referencia,
        "Norma de fabricaci√≥n": norma_fabricacion,
        "Norma de calidad": norma_calidad,
        "Tipo de ejecuci√≥n": tipo_ejecucion,
        "Altura de instalaci√≥n (msnm)": altura_instalacion,
        "Material del aislador": material_aislador,
        "Tipo de transformador": tipo_transformador,
        "Tensi√≥n m√°s elevada para el material (Um)": tension_um,
        "Tensi√≥n asignada soportada a la frecuencia industrial (Ud)-Aislamiento Interno a condiciones normales de prueba": ud_interno,
        "Tensi√≥n asignada soportada a la frecuencia industrial (Ud)-Aislamiento Externo a condiciones normales de prueba (*)": f"{ud_interno} a {int(altura_instalacion)} msnm",
        "Tensi√≥n asignada soportada al impulso tipo rayo (Up)-Aislamiento Interno a condiciones normales de prueba": up_interno,
        "Tensi√≥n asignada soportada al impulso tipo rayo (Up)-Aislamiento Externo a condiciones normales de prueba (*)": f"{up_interno} a {int(altura_instalacion)} msnm",
        "Tensi√≥n asignada soportada al impulso tipo maniobra (Us)-Aislamiento Interno a condiciones normales de prueba": us_interno,
        "Tensi√≥n asignada soportada al impulso tipo maniobra (Us)-Aislamiento Externo a condiciones normales de prueba (*)": us_externo,
        "Frecuencia asignada (fr)": "60 Hz",
        "Factor de tensi√≥n permanente": str(factor_permanente),
        "Factor de tensi√≥n durante 30 s": str(factor_30s),
        "Capacidad total (VA)": capacidad_total,
        "Condensador de alta tensi√≥n (C1)": c1,
        "Condensador de tensi√≥n intermedia (C2)": c2,
        "Tensi√≥n intermedia en circuito abierto": tension_intermedia,
        "N√∫mero de devanados secundarios": num_devanados,
        "Clase de precisi√≥n (5%-80%)": clase_precision_a,
        "Clase de precisi√≥n (80%-120%)": clase_precision_b,
        "Clase de precisi√≥n (120%-150%)": clase_precision_c,
        "Rango de burden (IEC 61869)": rango_burden,
        "Carga Devanado 1 (VA)": "15",
        "Carga Devanado 2 (VA)": "15",
        "Carga Devanado 3 (VA)": "15",
        "Carga Simult√°nea (VA)": "45",
        "Potencia t√©rmica l√≠mite": potencia_termica_limite,
        "Tensi√≥n primaria (Upn)": f"{upn_seleccionada} / ‚àö3",
        "Tensi√≥n secundaria (Usn)": usn_seleccionada,
        "Distancia de arco (mm)": distancia_arco,
        "Distancia m√≠nima de fuga (mm)": distancia_fuga,
        "Dispositivos de Protecci√≥n: (Todos los modelos contar√°n con accesorios carrier)": disp_prot,
        "a)Cuchilla externa para cortocircuitar la parte inductiva del equipo del lado del divisor capacitivo (Ground Potencial Switch)": cuchilla_ext,
        "b) Dispositivo amortiguador de ferrorresonancia": disp_amort,
        "c) Interruptores miniatura adecuados para protecci√≥n de los circuitos secundarios de tensi√≥n, con contactos auxiliares para indicaci√≥n de apertura y disparo. La curva de operaci√≥n de los interruptores miniatura debe ser del Tipo Z":int_mini
    }

    #Funci√≥n exportar Excel con estilo personalizado
    def exportar_excel(datos, fuente="Calibri", tama√±o=9):
        unidades = {
            "Altura de instalaci√≥n (msnm)": "msnm",
            "Capacidad total (VA)": "VA",
            "Tensi√≥n m√°s elevada para el material (Um)": "kV",
            "Tensi√≥n Ud - Aislamiento Interno": "kV",
            "Tensi√≥n Ud - Aislamiento Externo": "kV",
            "Tensi√≥n Up - Aislamiento Interno": "kV",
            "Tensi√≥n Up - Aislamiento Externo": "kV",
            "Tensi√≥n Us - Aislamiento Interno": "kV",
            "Tensi√≥n Us - Aislamiento Externo": "kV",
            "Frecuencia asignada (fr)": "Hz",
            "Factor de tensi√≥n permanente": "",
            "Factor de tensi√≥n durante 30 s": "",
            "Carga Devanado 1 (VA)": "VA",
            "Carga Devanado 2 (VA)": "VA",
            "Carga Devanado 3 (VA)": "VA",
            "Carga Simult√°nea (VA)": "VA",
            "Tensi√≥n primaria (Upn)": "V",
            "Tensi√≥n secundaria (Usn)": "V"
            # Puedes a√±adir m√°s unidades si lo deseas
        }
    
        df = pd.DataFrame([
            {
                "√çTEM": i + 1,
                "DESCRIPCI√ìN": campo,
                "UNIDAD": unidades.get(campo, ""),
                "REQUERIDO": valor,
                "OFRECIDO": ""
            }
            for i, (campo, valor) in enumerate(datos.items())
        ])
    
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name="CTG", startrow=6)
            wb = writer.book
            ws = writer.sheets["CTG"]
    
            # üñºÔ∏è Logo (opcional)
            logo_path = "siemens_logo.png"
            try:
                img = Image(logo_path)
                img.width = 300
                img.height = 100
                ws.add_image(img, "C1")
            except FileNotFoundError:
                st.warning("‚ö†Ô∏è No se encontr√≥ el logo 'siemens_logo.png'. Aseg√∫rate de subirlo al repositorio.")
    
            # üü™ T√≠tulo
            ws.merge_cells("A2:E4")
            cell = ws.cell(row=2, column=1)
            cell.value = "FICHA T√âCNICA TRANSFORMADOR DE TENSI√ìN"
            cell.font = Font(name=fuente, bold=True, size=14, color="000000")
            cell.alignment = Alignment(horizontal="center", vertical="center")
    
            # üè∑Ô∏è Subt√≠tulo
            ws.merge_cells("A5:D5")
            ws["A5"] = "CARACTER√çSTICAS GARANTIZADAS"
            ws["A5"].font = Font(name=fuente, bold=True, size=12)
            ws["A5"].alignment = Alignment(horizontal="center")
    
            # üé® Encabezados
            header_fill = PatternFill(start_color="003366", end_color="003366", fill_type="solid")
            header_font = Font(name=fuente, size=tama√±o, color="FFFFFF", bold=True)
            thin_border = Border(
                left=Side(style='thin'), right=Side(style='thin'),
                top=Side(style='thin'), bottom=Side(style='thin')
            )
    
            for col_num in range(1, 6):
                cell = ws.cell(row=6, column=col_num)
                cell.fill = header_fill
                cell.font = header_font
                cell.alignment = Alignment(horizontal="center")
                cell.border = thin_border
            # üìê Ajuste de columnas
            ws.column_dimensions["A"].width = 4
            ws.column_dimensions["B"].width = 50
            ws.column_dimensions["C"].width = 10
            ws.column_dimensions["D"].width = 12
            ws.column_dimensions["E"].width = 12
    
            # üìã Formato de filas
            for row in ws.iter_rows(min_row=7, max_row=ws.max_row, max_col=5):
                max_lines = 1
                for cell in row:
                    cell.border = thin_border
                    cell.alignment = Alignment(vertical="center", wrap_text=True)
                    cell.font = Font(name=fuente, size=tama√±o)
    
                    if cell.value and isinstance(cell.value, str):
                        if cell.column_letter == "B":
                            wrapped = textwrap.wrap(cell.value, width=55)
                            max_lines = max(max_lines, len(wrapped))
    
                ws.row_dimensions[row[0].row].height = max_lines * 15
                row[0].alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
                row[2].alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
                row[3].alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
                row[4].alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
    
        output.seek(0)
        return output

    fuente="Calibri"
    tama√±o=9
    if st.button("üìä Generar archivo CTG"):
        archivo_excel = exportar_excel(ficha_ctg, fuente=fuente, tama√±o=tama√±o)
        st.download_button(
            label="üì• Descargar archivo CTG en Excel",
            data=archivo_excel,
            file_name="CTG_Transformador_Tension.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )




































