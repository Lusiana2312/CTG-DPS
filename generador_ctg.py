import streamlit as st
from openpyxl.drawing.image import Image
from io import BytesIO
import pandas as pd
from openpyxl.styles import Font, Alignment, PatternFill, Border, Side

# Diccionario de usuarios autorizados
usuarios_autorizados = {
    "lusiana": "clave123",
    "daniel": "clave456"
}

# Pantalla de login
st.set_page_config(page_title="Acceso CTG", layout="wide")
st.title("üîê Acceso privado")

usuario = st.text_input("Usuario")
clave = st.text_input("Contrase√±a", type="password")

if usuario in usuarios_autorizados and usuarios_autorizados[usuario] == clave:
    st.success("‚úÖ Acceso concedido")
    
    # Aqu√≠ va TODO tu c√≥digo original
    # Puedes copiar y pegar desde donde empieza: `st.title("üìÑ Generador de Archivos CTG")`
    
else:
    st.warning("üîí Ingresa tus credenciales para continuar")
    st.stop()

#empieza codigo
import streamlit as st
import pandas as pd
from io import BytesIO
from openpyxl.styles import Font, Alignment, PatternFill, Border, Side
from openpyxl.utils import get_column_letter

st.set_page_config(page_title="Generador CTG", layout="wide")
st.title("üìÑ Generador de Archivos CTG")

# üõ†Ô∏è Par√°metros editables
with st.expander("üõ†Ô∏è Par√°metros editables"):
    tipo_equipo = st.selectbox("Tipo de equipo:", ["Descargador de sobretensiones"])
    nivel_tension = st.selectbox("Nivel de tensi√≥n (kV):", [115, 230, 500])
    # Diccionario de Ur seg√∫n nivel de tensi√≥n
    ur_por_nivel = {
        115: 100,
        230: 200,
        500: 400
    }

    # Obtener Ur autom√°ticamente
    ur = ur_por_nivel[nivel_tension]
    st.markdown(f"üîå Tensi√≥n asignada (Ur): **{ur} kV**")

    altura_instalacion = st.number_input("Altura sobre el nivel del mar (m.s.n.m):", min_value=0, value=1000)

    sps_opciones = {
        "Bajo": 16,
        "Medio": 20,
        "Pesado": 25,
        "Muy Pesado": 31
    }
    sps_seleccion = st.selectbox("Clase de severidad de contaminaci√≥n del sitio (SPS):", list(sps_opciones.keys()))
    valor_sps = sps_opciones[sps_seleccion]
    st.markdown(f"üî¢ Valor SPS seleccionado: **{valor_sps}**")

    ka = st.number_input("Coeficiente Ka:", min_value=1.0, max_value=2.0, value=1.0, step=0.1)
    km = st.number_input("Coeficiente Km:", min_value=1.0, max_value=2.0, value=1.0, step=0.1)

    desempeno_sismico = st.selectbox("Desempe√±o s√≠smico vigente:", ["Alto", "Moderado"])

    distancia_fuga = nivel_tension * valor_sps * ka * km
    st.markdown(f"üìè **Distancia m√≠nima de fuga requerida:** {distancia_fuga:.2f} mm")

# üìò Par√°metros definidos por norma
with st.expander("üìò Par√°metros definidos por norma"):
    datos_definidos = {
        "Norma de fabricaci√≥n": "IEC 60099-4",
        "Norma de calidad": "IEC 9001",
        "Tipo de ejecuci√≥n": "Exterior",
        "Frecuencia asignada (f)": "60",
        "Material cubierta": "Polim√©rico",
        "N√∫mero de columnas": "1",
        "Tensi√≥n m√°s elevada para el material (Um)": "245",
        "Tensi√≥n continua de operaci√≥n (Uc)": "20",
        "Corriente de descarga asignada (In)": "40",
        "Clase de descarga de l√≠nea": "4",
        "Capacidad m√≠nima de disipaci√≥n de energ√≠a asignada para dos impulsos de larga duraci√≥n kJ/kV (Ur)": "‚â•10",
        "Transferencia de carga repetitiva Qrs": "‚â•2.4",
        "Contador de descargas": "S√≠"
    }
    for campo, valor in datos_definidos.items():
        st.markdown(f"**{campo}:** {valor}")

# ‚ö° Tensiones residuales
with st.expander("‚ö° Tensiones residuales"):
    tensiones_residuales = {
        "Tensi√≥n residual al impulso de corriente de escal√≥n (10 kA)": "",
        "Tensi√≥n residual al impulso tipo maniobra (250 A)": "",
        "Tensi√≥n residual al impulso tipo maniobra (500 A)": "",
        "Tensi√≥n residual al impulso tipo maniobra (1000 A)": "",
        "Tensi√≥n residual al impulso tipo maniobra (2000 A)": "",
        "Tensi√≥n residual al impulso tipo rayo (5 kA)": "",
        "Tensi√≥n residual al impulso tipo rayo (10 kA)": "",
        "Tensi√≥n residual al impulso tipo rayo (20 kA)": "",
        "Tensi√≥n asignada soportada a la frecuencia industrial (Ud)": "",
        "Tensi√≥n asignada soportada al impulso tipo rayo (Up)": "",
        "Tensi√≥n asignada soportada al impulso tipo maniobra (Us)": ""
    }
    for campo in tensiones_residuales:
        tensiones_residuales[campo] = st.text_input(campo, value="")

# üìã Consolidar todos los datos
datos = {
    "Tipo de equipo": tipo_equipo,
    "Nivel de tensi√≥n (kV)": nivel_tension,
    "Tensi√≥n asignada (Ur)": ur,
    "Altura de instalaci√≥n (m.s.n.m)": altura_instalacion,
    "Clase SPS": sps_seleccion,
    "Valor SPS": valor_sps,
    "Coeficiente Ka": ka,
    "Coeficiente Km": km,
    "Distancia m√≠nima de fuga (mm)": round(distancia_fuga, 2),
    "Desempe√±o s√≠smico vigente": desempeno_sismico
}
datos.update(datos_definidos)
datos.update(tensiones_residuales)


# üì§ Funci√≥n para exportar Excel con estilo
def exportar_excel(datos):
    unidades = {
        "Nivel de tensi√≥n (kV)": "kV",
        "Tensi√≥n asignada (Ur)": "kV",
        "Altura de instalaci√≥n (m.s.n.m)": "m.s.n.m",
        "Coeficiente Ka": "",
        "Coeficiente Km": "",
        "Distancia m√≠nima de fuga (mm)": "mm",
        "Tensi√≥n residual al impulso de corriente de escal√≥n (10 kA)": "kV",
        "Tensi√≥n residual al impulso tipo maniobra (250 A)": "kV",
        "Tensi√≥n residual al impulso tipo maniobra (500 A)": "kV",
        "Tensi√≥n residual al impulso tipo maniobra (1000 A)": "kV",
        "Tensi√≥n residual al impulso tipo maniobra (2000 A)": "kV",
        "Tensi√≥n residual al impulso tipo rayo (5 kA)": "kV",
        "Tensi√≥n residual al impulso tipo rayo (10 kA)": "kV",
        "Tensi√≥n residual al impulso tipo rayo (20 kA)": "kV",
        "Tensi√≥n asignada soportada a la frecuencia industrial (Ud)": "kV",
        "Tensi√≥n asignada soportada al impulso tipo rayo (Up)": "kV",
        "Tensi√≥n asignada soportada al impulso tipo maniobra (Us)": "kV"
    }

    df = pd.DataFrame([
        {
            "√çTEM": i + 1,
            "DESCRIPCI√ìN": campo,
            "UNIDAD": unidades.get(campo, ""),
            "REQUERIDO": valor
        }
        for i, (campo, valor) in enumerate(datos.items())
    ])

    output = BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, index=False, sheet_name="CTG", startrow=6)
        wb = writer.book
        ws = writer.sheets["CTG"]

        # üñºÔ∏è Insertar imagen del logo
        logo_path = "siemens_logo.png"
        try:
            img = Image(logo_path)
            img.width = 120
            img.height = 40
            ws.add_image(img, "A1")
        except FileNotFoundError:
            st.warning("‚ö†Ô∏è No se encontr√≥ el logo 'siemens_logo.png'. Aseg√∫rate de subirlo al repositorio.")

        # üü™ Caja de t√≠tulo "CARACTER√çSTICAS GARANTIZADAS"
        ws.merge_cells("B2:D2")
        ws["B2"] = "CARACTER√çSTICAS GARANTIZADAS"
        ws["B2"].font = Font(bold=True, size=12, color="FFFFFF")
        ws["B2"].alignment = Alignment(horizontal="center", vertical="center")
        ws["B2"].fill = PatternFill(start_color="0070C0", end_color="0070C0", fill_type="solid")

        # üè∑Ô∏è T√≠tulo t√©cnico
        ws.merge_cells("A5:D5")
        ws["A5"] = f"DESCARGADORES DE SOBRETENSI√ìN {datos['Nivel de tensi√≥n (kV)']} kV"
        ws["A5"].font = Font(bold=True, size=14)
        ws["A5"].alignment = Alignment(horizontal="center")

        # üé® Encabezados con estilo
        header_fill = PatternFill(start_color="003366", end_color="003366", fill_type="solid")
        header_font = Font(color="FFFFFF", bold=True)
        thin_border = Border(
            left=Side(style='thin'), right=Side(style='thin'),
            top=Side(style='thin'), bottom=Side(style='thin')
        )

        for col_num in range(1, 5):
            cell = ws.cell(row=6, column=col_num)
            cell.fill = header_fill
            cell.font = header_font
            cell.alignment = Alignment(horizontal="center")
            cell.border = thin_border

        # üìê Ajuste de columnas
        ws.column_dimensions["A"].width = 10
        ws.column_dimensions["B"].width = 50
        ws.column_dimensions["C"].width = 15
        ws.column_dimensions["D"].width = 20

        # üìã Formato de filas
        for row in ws.iter_rows(min_row=7, max_row=ws.max_row, max_col=4):
            for cell in row:
                cell.border = thin_border
                cell.alignment = Alignment(vertical="center", wrap_text=True)
            row[0].alignment = Alignment(horizontal="center", vertical="center")  # √çTEM
            row[2].alignment = Alignment(horizontal="center", vertical="center")  # UNIDAD

    output.seek(0)
    return output

# üì• Bot√≥n para generar y descargar
if st.button("üìä Generar archivo CTG"):
    archivo_excel = exportar_excel(datos)
    st.download_button(
        label="üì• Descargar archivo CTG en Excel",
        data=archivo_excel,
        file_name=f"CTG_{tipo_equipo.replace(' ', '_')}_{nivel_tension}kV.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )










