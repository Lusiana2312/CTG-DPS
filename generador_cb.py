# empieza codigo
import streamlit as st
from openpyxl import Workbook
from io import BytesIO
from datetime import datetime
import pandas as pd
from openpyxl.drawing.image import Image
from openpyxl.styles import Font, Alignment, Border, Side, PatternFill
import textwrap


################## CTG CIRCUIT BREAKER// INTERRUPTOR DE POTENCIA
def mostrar_app():
    st.set_page_config(page_title="Generador CTG - Interruptor de Potencia", layout="wide")

    st.title("üìÑ Generador de Ficha CTG")
    st.subheader("Interruptor de Potencia")

    # 1. Fabricante
    fabricante = "Indicar"
    st.text("### üè¢ Fabricante: " + fabricante)
    # 2. Pa√≠s
    pais = "Indicar"
    st.text("### Pa√≠s: " + pais)
    # 3. Referencia
    referencia = "Indicar"
    st.text("### Referencia: " + referencia)
    # 4. Norma de fabricaci√≥n
    norma_fabricacion = "IEC 62271-100 / IEC 62271-110"
    st.markdown(f"**Norma de fabricaci√≥n:** {norma_fabricacion}")
    # 5. Norma de calidad
    norma_calidad = "ISO 9001"
    st.markdown(f"**Norma de calidad:** {norma_calidad}")
    # 6. Medio de extinci√≥n
    medio_extincion = st.selectbox("Medio de extinci√≥n", ["Vac√≠o", "SF6", "Aceite", "Aire comprimido"])
    # 7. N√∫mero de polos
    num_polos = 3
    st.text("N√∫mero de polos: {num_polos}")
    # 8. N√∫mero de c√°maras por polo
    camaras_por_polo = "Indicar"
    st.text(f"### üî¢ N√∫mero de c√°maras polo: " + camaras_por_polo)
    # 9. Tipo de ejecuci√≥n
    tipo_ejecucion = st.selectbox("Tipo de ejecuci√≥n", ["Exterior", "Interior"])
    # 10. Altura 
    altura_instalacion = st.number_input("Altura de instalaci√≥n (m.s.n.m)", min_value=0, value=1000)

    # 11. Temperatura de operaci√≥n
    st.markdown("### üå°Ô∏è Temperatura de operaci√≥n")
    temp_min = -5
    st.text(f"### Temperatura m√≠nima anual (¬∞C): {temp_min}")
    temp_max = +40
    st.text(f"### Temperatura m√°xima anual (¬∞C): {temp_max}")
    temp_media = +35
    st.text(f"### Temperatura media (24 h) (¬∞C): {temp_media}")
    
    # 12. Categor√≠a de corrosi√≥n del ambiente
    categoria_corrosion = st.selectbox(
        "Categor√≠a de corrosi√≥n del ambiente (ISO 12944-2 / ISO 9223)",
        options=["C1 - Muy baja", "C2 - Baja", "C3 - Media", "C4 - Alta", "C5 - Muy alta"]
    )
    # 13. Frecuencia
    frecuencia_asignada = "60 Hz"
    st.text(f"### Frecuencia asignada (fr): " + frecuencia_asignada)
    # 14. Tensi√≥n asignada Ur
    ur = st.selectbox("Tensi√≥n asignada (Ur)", options=["123 kV", "245 kV", "550 kV"])
    
    # 15. Tensi√≥n asignada a frecuencia industrial
    # Asignaci√≥n autom√°tica de Ud seg√∫n Ur
    ud_por_ur = {
        "123 kV": {"fase_tierra_ud": "#", "entre_fases_ud": "#", "interruptor_abierto_ud": "#"},
        "245 kV": {"fase_tierra_ud": "460", "entre_fases_ud": "460", "interruptor_abierto_ud": "#"},
        "550 kV": {"fase_tierra_ud": "830 kV", "entre_fases_ud": "830 kV", "interruptor_abierto_ud": "1150 kV"}
    }
    ud_valores = ud_por_ur.get(ur,{"fase_tierra_ud": "", "entre_fases_ud": "", "interruptor_abierto_ud": ""})
    st.markdown("#### Tensi√≥n asignada soportada a frecuencia industrial (Ud)")
    st.markdown(f"a) Fase-Tierra: **{ud_valores['fase_tierra_ud']}**")
    st.markdown(f"b) Entre fases: **{ud_valores['entre_fases_ud']}**")
    st.markdown(f"c) A trav√©s de interruptor abierto: **{ud_valores['interruptor_abierto_ud']}**")
    
    # 16. Tensi√≥n asignada a impulso maniobra
    # Asignaci√≥n autom√°tica de Us por componente seg√∫n Ur
    us_por_ur = {
        "123 kV": {"fase_tierra_us": "N.A.", "entre_fases_us": "N.A.", "interruptor_abierto_us": "N.A."},
        "245 kV": {"fase_tierra_us": "N.A.", "entre_fases_us": "N.A.", "interruptor_abierto_us": "N.A."},
        "550 kV": {"fase_tierra_us": "1300 kV", "entre_fases_us": "2210 kV", "interruptor_abierto_us": "1300 kV"}
    }
    us_valores = us_por_ur.get(ur, {"fase_tierra_us": "", "entre_fases_us": "", "interruptor_abierto_us": ""})
    st.markdown("#### Tensi√≥n asignada soportada a impulso de maniobra (Us)")
    st.markdown(f"a) Fase-Tierra: **{us_valores['fase_tierra_us']}**")
    st.markdown(f"b) Entre fases: **{us_valores['entre_fases_us']}**")
    st.markdown(f"c) A trav√©s de interruptor abierto: **{us_valores['interruptor_abierto_us']}**")

    
    # 17. Tensi√≥n asignada a impulso tipo rayo
    # Asignaci√≥n autom√°tica de Up seg√∫n Ur
    up_por_ur = {
        "123 kV": {"fase_tierra_up": "#", "entre_fases_up": "#", "interruptor_abierto_up": "#"},
        "245 kV": {"fase_tierra_up": "1050 kV", "entre_fases_up": "1050 kV", "interruptor_abierto_up": "#"},
        "550 kV": {"fase_tierra_up": "1800 kV", "entre_fases_up": "1800 kV", "interruptor_abierto_up": "1800 (+455) kV"}
    }
    up_valores = up_por_ur.get(ur, {"fase_tierra_up": "", "entre_fases_up": "", "interruptor_abierto_up": ""})
    st.markdown("#### Tensi√≥n asignada soportada a impulso tipo rayo (Up)")
    st.markdown(f"a) Fase-Tierra: **{up_valores['fase_tierra_up']}**")
    st.markdown(f"b) Entre fases: **{up_valores['entre_fases_up']}**")
    st.markdown(f"c) A trav√©s de interruptor abierto: **{up_valores['interruptor_abierto_up']}**")

    # 18. Corriente asignada
    ir_por_ur = {
        "123 kV": ["1200 A"],
        "245 kV": ["4000 A"],
        "550 kV": ["2500 A"]
    }
    # Mostrar opciones de Ir seg√∫n Ur
    opciones_ir = ir_por_ur.get(ur, [])
    ir = st.selectbox("Corriente asignada en servicio continuo (Ir)", opciones_ir)
    
    # 19. Poder de corte asignado (Ics) seg√∫n Ur
    ics_por_ur = {
        "123 kV": ["25 kA", "31.5 kA", "40 kA"],
        "245 kV": ["40 kA"],
        "550 kV": ["50 kA"]
    }
    # Mostrar opciones de Ics seg√∫n Ur
    opciones_ics = ics_por_ur.get(ur, [])
    ics = st.selectbox("Poder de corte asignado en cortocircuito (Ics)", opciones_ics)

    # 20. Duraci√≥n del cortocircuito asignado (Ics)
    duracion_ics = "1 s"
    st.text("### Duraci√≥n del cortocircuito asignado (Ics): " + duracion_ics)
    
    # 21. Porcentaje de corriente aperi√≥dica (%)
    porcentaje_ap = "Indicar"
    st.text("### Porcentaje de corriente aperi√≥dica (%): " +  porcentaje_ap)

    # 22.Poder de cierre asignado en cortocircuito (Ip)
    st.markdown("**Poder de cierre asignado en cortocircuito (Ip):** 2.6 √ó Ics")

    # 23. Factor de primer polo seg√∫n Ur
    factor_primer_polo = 1,5
    st.text(f"**Factor de primer polo:** {factor_primer_polo}")

    # 24. Tensi√≥n transitoria de restablecimiento asignada para fallas en bornes
    st.markdown("### ‚ö° Tensi√≥n transitoria de restablecimiento asignada para fallas en bornes")
    # Mostrar los textos fijos
    st.markdown("**a)** Primera tensi√≥n de referencia (u1) kV: Indicar")
    st.markdown("**b)** Tiempo t1 ms: Indicar")
    st.markdown("**c)** Valor cresta del TTR (uc) kV: Indicar")
    st.markdown("**d)** Tiempo t2 ms: Indicar")
    st.markdown("**e)** Retardo td ms: Indicar")
    st.markdown("**f)** Tensi√≥n u‚Äô kV: Indicar")
    st.markdown("**g)** Tiempo t‚Äô ms: Indicar")
    st.markdown("**h)** Velocidad de crecimiento (u1 / t1) kV/ms: Indicar")
    
    # Asignar valores a las variables
    u1 = t1 = uc = t2 = td = u_prima = t_prima = vel_crecimiento = "Indicar"

    
    # 25. Caracter√≠sticas asignadas para fallas pr√≥ximas en l√≠neas
    st.markdown("### ‚ö° Caracter√≠sticas asignadas para fallas pr√≥ximas en l√≠neas")

    # a) Caracter√≠sticas asignadas del circuito de alimentaci√≥n
    st.markdown("#### a) Caracter√≠sticas asignadas del circuito de alimentaci√≥n")
    st.markdown("**‚Ä¢)** Primera tensi√≥n de referencia (u1) kV: Indicar")
    st.markdown("**‚Ä¢)** Tiempo t1 ms: Indicar")
    st.markdown("**‚Ä¢)** Valor cresta del TTR (uc) kV: Indicar")
    st.markdown("**‚Ä¢)** Tiempo t2 ms: Indicar")
    st.markdown("**‚Ä¢)** Retardo td ms: Indicar")
    st.markdown("**‚Ä¢)** Tensi√≥n u‚Äô kV: Indicar")
    st.markdown("**‚Ä¢)** Tiempo t‚Äô ms: Indicar")
    st.markdown("**‚Ä¢)** Velocidad de crecimiento (u1 / t1) kV/ms: Indicar")
    u1_alimentacion = t1_alimentacion = uc_alimentacion = t2_alimentacion = td_alimentacion = u_prima_alimentacion = t_prima_alimentacion = vel_crecimiento_alimentacion = "Indicar"

    # b) Caracter√≠sticas asignadas de la l√≠nea
    st.markdown("#### b) Caracter√≠sticas asignadas de la l√≠nea")
    st.markdown("‚Ä¢ Impedancia de onda asignada (Z)")
    st.markdown("‚Ä¢ Factor de cresta asignada (k)")
    st.markdown("‚Ä¢ Factor de TCTR (s)")
    st.markdown("‚Ä¢ Retardo (tdl)")
    z_linea = k_linea = s_linea = tdl_linea = "Indicar"


    
    # 26. Caracter√≠stica de TRV de peque√±as corrientes inductivas seg√∫n IEC 62271-110
    st.markdown("### ‚ö° Caracter√≠stica de TRV de peque√±as corrientes inductivas seg√∫n IEC 62271-110")
    
    # Rangos de referencia seg√∫n Ur
    rangos_trv = {
        "123 kV": {"Uc": "# kV", "t3_1": "# ¬µs", "t3_2": "# ¬µs"},
        "245 kV": {"Uc": "380 kV", "t3_1": "167 ¬µs", "t3_2": "297 ¬µs"},
        "550 kV": {"Uc": "1240 kV", "t3_1": "300 ¬µs", "t3_2": "536 ¬µs"}
    }
    
    # Obtener valores seg√∫n Ur
    valores_trv = rangos_trv.get(ur, {"Uc": "Indicar", "t3_1": "Indicar", "t3_2": "Indicar"})
    
    # Mostrar los valores como texto
    st.markdown(f"**a)** Valor m√≠nimo pico de TRV Uc: {valores_trv['Uc']}")
    st.markdown(f"**b)** Tiempo m√°ximo t‚ÇÉ Load circuit 1: {valores_trv['t3_1']}")
    st.markdown(f"**c)** Tiempo m√°ximo t‚ÇÉ Load circuit 2: {valores_trv['t3_2']}")
    
    # Asignar variables para exportaci√≥n o uso posterior
    uc_trv = valores_trv["Uc"]
    t3_1 = valores_trv["t3_1"]
    t3_2 = valores_trv["t3_2"]
    

    # 27. Tiempo de arco m√≠nimo ante peque√±as corrientes inductivas
    st.markdown("### ‚è±Ô∏è Tiempo de arco m√≠nimo ante peque√±as corrientes inductivas")
    tiempo_arco_minimo = "<=5 ms"
    st.text("### Tiempo de arco m√≠nimo (Minimum Arcing Time): " + tiempo_arco_minimo)

    ################################################

    # 28. N√∫mero de corte Œª ("Chopping Number Œª")
    st.markdown("### üî¢ N√∫mero de corte Œª (Chopping Number Œª)")
    if ur == "123 kV":
        numero_corte_lambda = "<=3x10^4"
    elif ur == "245 kV":
        numero_corte_lambda = "<=5x10^4"
    elif ur == "550 kV":
        numero_corte_lambda = "<=7x10^4"
    else:
        numero_corte_lambda = "Indicar"
    
    # Mostrar el resultado como texto
    st.markdown(f"**N√∫mero de corte Œª:** {numero_corte_lambda}")

    
    # 29. Secuencia de maniobras asignada
    st.markdown("### üîÅ Secuencia de maniobras asignada")
    secuencia_maniobras = "O-0,3s-CO-3min-CO"
    st.text("Secuencia de maniobras asignada: " + secuencia_maniobras)

    # 30. Poder de corte en discordancia de fases (Id)
    st.markdown("### ‚ö° Poder de corte en discordancia de fases (Id)")
    
    st.markdown("**a)** Primera tensi√≥n de referencia (u1) [Id]: Indicar")
    st.markdown("**b)** Tiempo t1 [Id]: Indicar")
    st.markdown("**c)** Valor cresta del TTR (uc) [Id]: Indicar")
    st.markdown("**d)** Tiempo t2 [Id]: Indicar")
    st.markdown("**e)** Velocidad de crecimiento (u1 / t1) [Id]: Indicar")
    
    # Asignaci√≥n fija de valores
    id_u1 = id_t1 = id_uc = id_t2 = id_vel_crecimiento = "Indicar"
    
    # 31. Apertura de l√≠neas en vac√≠o
    st.markdown("### ‚ö° Apertura de l√≠neas en vac√≠o")
    st.markdown("**a)** Poder de corte asignado (Ir) [Apertura de l√≠neas en vac√≠o]: Indicar")
    st.markdown("**b)** Sobretensi√≥n de maniobra presente: Indicar")
    # Asignaci√≥n fija de valores
    ir_apertura_linea = sobretension_maniobra = "Indicar"

    # 32. Apertura de corrientes inductivas peque√±as
    st.markdown("### ‚ö° Apertura de corrientes inductivas peque√±as")
    
    # Campo editable (se mantiene igual)
    apertura_inductiva = st.selectbox("¬øAplica apertura de corrientes inductivas peque√±as?", ["S√≠", "No"])
    # Campos fijos con valor "Indicar"
    st.markdown("**a)** Poder de corte asignado [corrientes inductivas peque√±as]: Indicar")
    st.markdown("**b)** Sobretensi√≥n de maniobra m√°xima: Indicar")
    # Asignaci√≥n fija de valores
    ir_inductiva = sobretension_inductiva = "Indicar"
    
    # 33. N√∫mero de operaciones mec√°nicas
    st.markdown("### ‚öôÔ∏è N√∫mero de operaciones mec√°nicas")
    num_operaciones_mecanicas = st.selectbox("N√∫mero de operaciones mec√°nicas", ["M1", "M2", "M3"])

    # 34. Probabilidad de reencendido
    st.markdown("### üîÑ Probabilidad de reencendido")
    probabilidad_reencendido = st.selectbox("Probabilidad de reencendido", ["C1", "C2"])

    # 35. M√°xima diferencia de tiempo entre contactos de diferente polo
    st.markdown("### ‚è±Ô∏è M√°xima diferencia de tiempo entre contactos de diferente polo")
    st.markdown("**M√°xima diferencia de tiempo entre contactos de diferente polo al tocarse durante un cierre o al separarse durante una apertura:** Indicar")
    # Asignaci√≥n fija
    diferencia_tiempo_contactos = "Indicar"
    
    # 36. Maniobra de apertura
    st.markdown("### üîß Maniobra de apertura")
    st.markdown("**a)** Tiempo de apertura: Indicar")
    st.markdown("**b)** Tiempo de arco: Indicar")
    st.markdown("**c)** Tiempo m√°ximo de corte asignado: 40 ms")
    tiempo_apertura = "Indicar"
    tiempo_arco = "Indicar"
    tiempo_max_corte = "40 ms"
    
    # 37. Tiempo muerto
    st.markdown("### ‚è≥ Tiempo muerto")
    st.markdown("**Tiempo muerto:** Indicar")
    tiempo_muerto = "Indicar"
    
    # 38. Maniobra de cierre
    st.markdown("### üîß Maniobra de cierre")
    
    st.markdown("**a)** Tiempo de establecimiento: Indicar")
    st.markdown("**b)** Tiempo de prearco: Indicar")
    st.markdown("**c)** Tiempo de cierre: Indicar")
    tiempo_establecimiento = tiempo_prearco = tiempo_cierre = "Indicar"

    # 39. Gas SF6 - Interruptor
    st.markdown("### üß™ Gas SF‚ÇÜ ‚Äì Interruptor")
    st.markdown("**a)** Presi√≥n de gas asignada para maniobra (Pob): Indicar")
    st.markdown("**b)** Presi√≥n de gas asignada para el corte (Pcb): Indicar")
    presion_maniobra = presion_corte = "Indicar"

    # 40. Volumen total de SF6 por polo a 0,1 MPa
    st.markdown("### üß™ Volumen total de SF‚ÇÜ por polo a 0,1 MPa")
    st.markdown("**Volumen total de SF‚ÇÜ por polo a 0,1 MPa:** Indicar")
    volumen_sf6 = "Indicar"

    # 41. P√©rdida m√°xima de SF6 por a√±o (valor fijo)
    st.markdown("### P√©rdida m√°xima de SF‚ÇÜ por a√±o")
    perdida_sf6 = "‚â§ 0.5%"
    st.markdown(f"**P√©rdida m√°xima de SF‚ÇÜ por a√±o:** {perdida_sf6}")
    
    # 42. Resistencia m√°xima entre terminales
    st.markdown("### Resistencia m√°xima entre terminales")
    st.markdown("**Resistencia m√°xima entre terminales (ŒºŒ©):** Indicar")
    resistencia_max_terminales = "Indicar"

    ################### PREGUNTAR
    #  43. Capacitancia
    st.markdown("### Capacitancia")
    cap_entre_contactos_con_resistencia = st.text_input("a) Entre contactos abiertos - Con resistencia de preinserci√≥n (pF)")
    cap_entre_contactos_sin_resistencia = st.text_input("a) Entre contactos abiertos - Sin resistencia de preinserci√≥n (pF)")
    cap_entre_contactos_tierra = st.text_input("b) Entre contactos y tierra (pF)")
    cap_condensador_gradiente = st.text_input("c) Condensador de gradiente (***) (pF)")

    # 44. Material de los empaques
    st.markdown("### üß™ Material de los empaques")
    st.markdown("**Material de los empaques:** Indicar")
    material_empaques = "Indicar"

    # 45. Operaci√≥n con mando sincronizado
    st.markdown("### üß™ Operaci√≥n con mando sincronizado")
    mando_sincronizado = st.radio("¬øOperaci√≥n con mando sincronizado?", ["S√≠", "No"])

    # 46. Resistencia de preinserci√≥n
    st.markdown("### üß™ Resistencia de preinserci√≥n")
    resistencia_preinsercion = st.radio("¬øResistencia de preinserci√≥n?", ["S√≠", "No"])

    # 47. Distancia m√≠nima en aire
    st.markdown("### üß™ Distancia m√≠nima en aire")
    st.markdown("**a)** Entre polos (mm): Indicar")
    st.markdown("**b)** A tierra (mm): Indicar")
    st.markdown("**c)** A trav√©s del polo (mm): Indicar")
    distancia_entre_polos = distancia_a_tierra = distancia_a_traves_polo = "Indicar"

    # 48. Clase de severidad de contaminaci√≥n del sitio (SPS)
    st.markdown("### üß™ Clase de severidad de contaminaci√≥n del sitio (SPS)")
    sps_clase = st.selectbox(
        "Clase de severidad de contaminaci√≥n del sitio (SPS)",
        ["Ligera", "Media", "Pesada", "Muy pesada"]
    )

    # 49. Distancia m√≠nima de fuga
    st.markdown("### üß™ Distancia m√≠nima de fuga")
    distancia_minima_fuga = st.text_input("Distancia m√≠nima de fuga (mm)")

    # 50. Datos s√≠smicos
    st.markdown("### üß™ Datos s√≠smicos")
    st.markdown("**Desempe√±o s√≠smico seg√∫n IEEE-693-Vigente:** Alto (0,5g)")
    st.markdown("**a)** Frecuencia natural de vibraci√≥n (Hz): Indicar")
    st.markdown("**b)** Coeficiente de amortiguamiento cr√≠tico (%): Indicar")
    desempeno_sismico_ieee = "Alto (0,5g)"
    frecuencia_natural_vibracion = coef_amortiguamiento_critico = "Indicar"

    # 51. Cargas admisibles en bornes
    st.markdown("### üß™ Cargas admisibles en bornes")
    carga_estatica_admisible = st.text_input("a) Carga est√°tica admisible (N)")
    carga_dinamica_admisible = st.text_input("b) Carga din√°mica admisible (N)")
    
    # üß™ Fuerzas asociadas a la operaci√≥n del equipo
    st.markdown("### üß™ Fuerzas asociadas a la operaci√≥n del equipo")

    fuerza_vertical = st.text_input("a) Fuerza vertical (N)")
    fuerza_horizontal = st.text_input("b) Fuerza horizontal (N)")

    # üß™ Masa neta de un polo completo con estructura
    st.markdown("### üß™ Masa neta de un polo completo con estructura")
    masa_neta_polo = st.text_input("Masa neta de un polo completo con estructura (kg)")

    # üß™ Dimensiones para transporte
    st.markdown("### üß™ Dimensiones para transporte")
    dimensiones_transporte = st.text_input("Dimensiones para transporte (Alto x Ancho x Largo) [mm]")

    # üß™ Datos adicionales para transporte y campo el√©ctrico
    st.markdown("### üß™ Datos adicionales")

    masa_neta_transporte = st.text_input("Masa neta para transporte (kg)")
    volumen_total_transporte = st.text_input("Volumen total para transporte (m¬≥)")
    campo_electrico_1m = st.text_input("Campo el√©ctrico a 1 metro de separaci√≥n del piso (kV/m)")

    # BOT√ìN PARA GENERAR FICHA
    ficha_cb = {
        "Fabricante": fabricante,
        "Pa√≠s": pais,
        "Referencia": referencia,
        "Norma de fabricaci√≥n": norma_fabricacion,
        "Norma de calidad": norma_calidad,
        "Medio de extinci√≥n": medio_extincion,
        "N√∫mero de polos": num_polos,
        "N√∫mero de c√°maras por polo": camaras_por_polo,
        "Tipo de ejecuci√≥n": tipo_ejecucion,
        "Altura de instalaci√≥n (m.s.n.m)": altura_instalacion,
        "Temperatura m√≠nima anual (¬∞C)": temp_min,
        "Temperatura m√°xima anual (¬∞C)": temp_max,
        "Temperatura media (24 h) (¬∞C)": temp_media,
        "Fecha de registro": datetime.now().strftime("%Y-%m-%d"),
        "Categor√≠a de corrosi√≥n del ambiente": categoria_corrosion,
        "Frecuencia asignada (fr)": frecuencia_asignada,
        "Tensi√≥n asignada (Ur) [kV]": ur,
        "Ud - Fase-Tierra [kV]": ud_valores["fase_tierra_ud"],
        "Ud - Entre fases [kV]": ud_valores["entre_fases_ud"],
        "Ud - A trav√©s de interruptor abierto [kV]": ud_valores["interruptor_abierto_ud"],
        "Us - Fase-Tierra [kV]": us_valores["fase_tierra_us"],
        "Us - Entre fases [kV]": us_valores["entre_fases_us"],
        "Us - A trav√©s de interruptor abierto [kV]": us_valores["interruptor_abierto_us"],
        "Up - Fase-Tierra [kV]": up_valores["fase_tierra_up"],
        "Up - Entre fases [kV]": up_valores["entre_fases_up"],
        "Up - A trav√©s de interruptor abierto [kV]": up_valores["interruptor_abierto_up"],
        "Corriente asignada en servicio continuo (Ir)": ir,
        "Poder de corte asignado en cortocircuito (Ics)": ics,
        "Duraci√≥n del cortocircuito asignado (Ics)": duracion_ics,
        "Porcentaje de corriente aperi√≥dica (%)": porcentaje_ap,
        "Poder de cierre asignado en cortocircuito (Ip)": "2.6 √ó Ics",
        "Factor de primer polo": factor_primer_polo,
        "TTR - Primera tensi√≥n de referencia (u1)": u1,
        "TTR - Tiempo t1": t1,
        "TTR - Valor cresta del TTR (uc)": uc,
        "TTR - Tiempo t2": t2,
        "TTR - Retardo td": td,
        "TTR - Tensi√≥n u‚Äô": u_prima,
        "TTR - Tiempo t‚Äô": t_prima,
        "TTR - Velocidad de crecimiento (u1 / t1)": vel_crecimiento,
        "Fallas pr√≥ximas - u1 alimentaci√≥n": u1_alimentacion,
        "Fallas pr√≥ximas - t1 alimentaci√≥n": t1_alimentacion,
        "Fallas pr√≥ximas - uc alimentaci√≥n": uc_alimentacion,
        "Fallas pr√≥ximas - t2 alimentaci√≥n": t2_alimentacion,
        "Fallas pr√≥ximas - td alimentaci√≥n": td_alimentacion,
        "Fallas pr√≥ximas - u‚Äô alimentaci√≥n": u_prima_alimentacion,
        "Fallas pr√≥ximas - t‚Äô alimentaci√≥n": t_prima_alimentacion,
        "Fallas pr√≥ximas - velocidad crecimiento alimentaci√≥n": vel_crecimiento_alimentacion,
        "Fallas pr√≥ximas - impedancia de onda (Z)": z_linea,
        "Fallas pr√≥ximas - factor de cresta (k)": k_linea,
        "Fallas pr√≥ximas - factor de TCTR (s)": s_linea,
        "Fallas pr√≥ximas - retardo (tdl)": tdl_linea,
        "TRV - Valor m√≠nimo pico de TRV Uc": uc_trv,
        "TRV - Tiempo m√°ximo t‚ÇÉ Load circuit 1": t3_1,
        "TRV - Tiempo m√°ximo t‚ÇÉ Load circuit 2": t3_2,
        "Tiempo de arco m√≠nimo (Minimum Arcing Time)": tiempo_arco_minimo,
        "N√∫mero de corte Œª (Chopping Number Œª)": numero_corte_lambda,
        "Secuencia de maniobras asignada": secuencia_maniobras,
        "Poder de corte en discordancia de fases - u1": id_u1,
        "Poder de corte en discordancia de fases - t1": id_t1,
        "Poder de corte en discordancia de fases - uc": id_uc,
        "Poder de corte en discordancia de fases - t2": id_t2,
        "Poder de corte en discordancia de fases - velocidad de crecimiento (u1 / t1)": id_vel_crecimiento,
        "Apertura de l√≠neas en vac√≠o - Poder de corte asignado (Ir)": ir_apertura_linea,
        "Apertura de l√≠neas en vac√≠o - Sobretensi√≥n de maniobra presente": sobretension_maniobra,
        "Apertura de corrientes inductivas peque√±as": apertura_inductiva,
        "Apertura inductiva - Poder de corte asignado": ir_inductiva,
        "Apertura inductiva - Sobretensi√≥n de maniobra m√°xima": sobretension_inductiva,
        "N√∫mero de operaciones mec√°nicas": num_operaciones_mecanicas,
        "Probabilidad de reencendido": probabilidad_reencendido,
        "M√°xima diferencia de tiempo entre contactos de diferente polo": diferencia_tiempo_contactos,
        "Maniobra de apertura - Tiempo de apertura": tiempo_apertura,
        "Maniobra de apertura - Tiempo de arco": tiempo_arco,
        "Maniobra de apertura - Tiempo m√°ximo de corte asignado": tiempo_max_corte,
        "Tiempo muerto": tiempo_muerto,
        "Maniobra de cierre - Tiempo de establecimiento": tiempo_establecimiento,
        "Maniobra de cierre - Tiempo de prearco": tiempo_prearco,
        "Maniobra de cierre - Tiempo de cierre": tiempo_cierre,
        "Gas SF6 - Presi√≥n de maniobra (Pob)": presion_maniobra,
        "Gas SF6 - Presi√≥n de corte (Pcb)": presion_corte,
        "Volumen total de SF6 por polo a 0,1 MPa": volumen_sf6,
        "P√©rdida m√°xima de SF6 por a√±o": perdida_sf6,
        "Resistencia m√°xima entre terminales (ŒºŒ©)": resistencia_max_terminales,
        "Capacitancia - Entre contactos abiertos con resistencia de preinserci√≥n (pF)": cap_entre_contactos_con_resistencia,
        "Capacitancia - Entre contactos abiertos sin resistencia de preinserci√≥n (pF)": cap_entre_contactos_sin_resistencia,
        "Capacitancia - Entre contactos y tierra (pF)": cap_entre_contactos_tierra,
        "Capacitancia - Condensador de gradiente (***) (pF)": cap_condensador_gradiente,
        "Material de los empaques": material_empaques,
        "Operaci√≥n con mando sincronizado": mando_sincronizado,
        "Resistencia de preinserci√≥n": resistencia_preinsercion,
        "Distancia m√≠nima en aire - Entre polos (mm)": distancia_entre_polos,
        "Distancia m√≠nima en aire - A tierra (mm)": distancia_a_tierra,
        "Distancia m√≠nima en aire - A trav√©s del polo (mm)": distancia_a_traves_polo,
        "Clase de severidad de contaminaci√≥n del sitio (SPS)": sps_clase,
        "Distancia m√≠nima de fuga (mm)": distancia_minima_fuga,
        "Desempe√±o s√≠smico seg√∫n IEEE-693-Vigente (**)": desempeno_sismico_ieee,
        "Frecuencia natural de vibraci√≥n (Hz)": frecuencia_natural_vibracion,
        "Coeficiente de amortiguamiento cr√≠tico (%)": coef_amortiguamiento_critico,
        "Cargas admisibles en bornes - Carga est√°tica admisible (N)": carga_estatica_admisible,
        "Cargas admisibles en bornes - Carga din√°mica admisible (N)": carga_dinamica_admisible,
        "Fuerzas asociadas a la operaci√≥n del equipo - Vertical (N)": fuerza_vertical,
        "Fuerzas asociadas a la operaci√≥n del equipo - Horizontal (N)": fuerza_horizontal,
        "Masa neta de un polo completo con estructura (kg)": masa_neta_polo,
        "Dimensiones para transporte (Alto x Ancho x Largo) [mm]": dimensiones_transporte,
        "Masa neta para transporte (kg)": masa_neta_transporte,
        "Volumen total para transporte (m¬≥)": volumen_total_transporte,
        "Campo el√©ctrico a 1 metro de separaci√≥n del piso (kV/m)": campo_electrico_1m
            
    }
    
    # üì§ Funci√≥n para exportar Excel con estilo personalizado
    def exportar_excel(datos, fuente="Calibri", tama√±o=9):
        # Diccionario de unidades (puedes ampliarlo seg√∫n tus campos)
        unidades = {
            "Tensi√≥n asignada (Ur) [kV]": "kV",
            "Altura de instalaci√≥n (m.s.n.m)": "m.s.n.m",
            "Temperatura m√≠nima anual (¬∞C)": "¬∞C",
            "Temperatura m√°xima anual (¬∞C)": "¬∞C",
            "Temperatura media (24 h) (¬∞C)": "¬∞C",
            "Frecuencia asignada (fr)": "Hz",
            "Corriente asignada en servicio continuo (Ir)": "A",
            "Poder de corte asignado en cortocircuito (Ics)": "kA",
            "Duraci√≥n del cortocircuito asignado (Ics)": "s",
            "Porcentaje de corriente aperi√≥dica (%)": "%",
            "Distancia m√≠nima en aire - Entre polos (mm)": "mm",
            "Distancia m√≠nima de fuga (mm)": "mm",
            "Campo el√©ctrico a 1 metro de separaci√≥n del piso (kV/m)": "kV/m",
            "Masa neta para transporte (kg)": "kg",
            "Volumen total para transporte (m¬≥)": "m¬≥",
            "Dimensiones para transporte (Alto x Ancho x Largo) [mm]": "mm",
            "Masa neta de un polo completo con estructura (kg)": "kg"
            # A√±ade m√°s unidades seg√∫n tus campos
        }
    
        # Crear DataFrame con estructura personalizada
        df = pd.DataFrame([
            {
                "√çTEM": i + 1,
                "DESCRIPCI√ìN": campo,
                "UNIDAD": unidades.get(campo, ""),
                "REQUERIDO": valor,
                "OFRECIDO": ""  # Columna vac√≠a para completar manualmente
            }
            for i, (campo, valor) in enumerate(datos.items())
        ])
    
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name="CTG", startrow=6)
            wb = writer.book
            ws = writer.sheets["CTG"]
    
            # üñºÔ∏è Insertar imagen del logo (opcional)
            logo_path = "siemens_logo.png"
            try:
                img = Image(logo_path)
                img.width = 300
                img.height = 100
                ws.add_image(img, "C1")
            except FileNotFoundError:
                st.warning("‚ö†Ô∏è No se encontr√≥ el logo 'siemens_logo.png'. Aseg√∫rate de subirlo al repositorio.")
    
            # üü™ Caja de t√≠tulo
            ws.merge_cells("A2:E4")
            cell = ws.cell(row=2, column=1)
            cell.value = "FICHA T√âCNICA INTERRUPTOR DE POTENCIA"
            cell.font = Font(name=fuente, bold=True, size=14, color="000000")
            cell.alignment = Alignment(horizontal="center", vertical="center")
    
            # üè∑Ô∏è Subt√≠tulo t√©cnico
            ws.merge_cells("A5:D5")
            ws["A5"] = f"CARACTER√çSTICAS GARANTIZADAS"
            ws["A5"].font = Font(name=fuente, bold=True, size=12)
            ws["A5"].alignment = Alignment(horizontal="center")
    
            # üé® Encabezados con estilo
            header_fill = PatternFill(start_color="003366", end_color="003366", fill_type="solid")
            header_font = Font(name=fuente, size=tama√±o, color="FFFFFF", bold=True)
            thin_border = Border(
                left=Side(style='thin'), right=Side(style='thin'),
                top=Side(style='thin'), bottom=Side(style='thin')
            )
    
            for col_num in range(1, 6):
                cell = ws.cell(row=6, column=col_num)
                cell.fill = header_fill
                cell.font = header_font
                cell.alignment = Alignment(horizontal="center")
                cell.border = thin_border
    
            # üìê Ajuste de columnas
            ws.column_dimensions["A"].width = 4
            ws.column_dimensions["B"].width = 50
            ws.column_dimensions["C"].width = 10
            ws.column_dimensions["D"].width = 12
            ws.column_dimensions["E"].width = 12
    
            
            
            # üìã Formato de filas con fuente personalizada y ajuste din√°mico de altura
            for row in ws.iter_rows(min_row=7, max_row=ws.max_row, max_col=5):
                max_lines = 1  # M√≠nimo una l√≠nea por celda
                for cell in row:
                    cell.border = thin_border
                    cell.alignment = Alignment(vertical="center", wrap_text=True)
                    cell.font = Font(name=fuente, size=tama√±o)
            
                    # Estimar n√∫mero de l√≠neas necesarias si el contenido es texto
                    if cell.value and isinstance(cell.value, str):
                        # Ajusta el ancho seg√∫n la columna (por ejemplo, columna B tiene 55 caracteres de ancho)
                        if cell.column_letter == "B":
                            wrapped = textwrap.wrap(cell.value, width=55)
                            max_lines = max(max_lines, len(wrapped))
            
                # Ajustar altura de la fila seg√∫n el contenido m√°s largo
                ws.row_dimensions[row[0].row].height = max_lines * 15  # 15 puntos por l√≠nea aprox.
            
                # Alineaci√≥n horizontal para columnas espec√≠ficas
                row[0].alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
                row[2].alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
                row[3].alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
                row[4].alignment = Alignment(horizontal="center", vertical="center", wrap_text=True)
            
                
        output.seek(0)
        return output
    
    # üì• Bot√≥n para generar y descargar
    fuente = "Calibri"
    tama√±o = 9
    if st.button("üìä Generar archivo CTG"):
        archivo_excel = exportar_excel(ficha_cb, fuente=fuente, tama√±o=tama√±o)
        nivel_tension = ficha_cb.get("Nivel de tensi√≥n (kV)", "XX")
        st.download_button(
            label="üì• Descargar archivo CTG en Excel",
            data=archivo_excel,
            file_name=f"CTG_{nivel_tension}kV.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
            
